version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: echolayer-postgres
    environment:
      POSTGRES_DB: echolayer
      POSTGRES_USER: echolayer_user
      POSTGRES_PASSWORD: echolayer_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - echolayer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U echolayer_user -d echolayer"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: echolayer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - echolayer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Solana Test Validator (for development)
  solana-test-validator:
    image: solanalabs/solana:v1.17.0
    container_name: echolayer-solana
    ports:
      - "8899:8899"
      - "8900:8900"
    networks:
      - echolayer-network
    restart: unless-stopped
    command: >
      sh -c "
        solana-keygen new --no-bip39-passphrase --silent --outfile /tmp/validator-keypair.json &&
        solana-test-validator 
          --ledger /tmp/test-ledger 
          --bind-address 0.0.0.0 
          --rpc-port 8899 
          --rpc-bind-address 0.0.0.0 
          --faucet-port 8900 
          --faucet-sol 1000000 
          --reset 
          --quiet
      "
    volumes:
      - solana_data:/tmp/test-ledger

  # EchoLayer Backend (Rust)
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: echolayer-backend
    environment:
      DATABASE_URL: postgresql://echolayer_user:echolayer_pass@postgres:5432/echolayer
      REDIS_URL: redis://redis:6379
      SOLANA_RPC_URL: http://solana-test-validator:8899
      JWT_SECRET: dev-super-secret-jwt-key-change-in-production
      RUST_LOG: info
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - echolayer-network
    restart: unless-stopped
    volumes:
      - ../backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # EchoLayer Frontend (Next.js)
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: echolayer-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:8080/ws
      NEXT_PUBLIC_SOLANA_NETWORK: localnet
      NEXT_PUBLIC_SOLANA_RPC_URL: http://localhost:8899
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - echolayer-network
    restart: unless-stopped
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: echolayer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - echolayer-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: echolayer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - echolayer-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: echolayer-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - echolayer-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  solana_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  echolayer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 